#! /usr/bin/env bash
## title........: ship
## description..: a simple, handy network addressing multitool with plenty of features
## author.......: sotirios m. roussis - xtonousou - xtonousou@gmail.com
## date.........: 20191102
## usage........: bash --norc ship -h --help -ncq --
## bash version.: 4.0 or later
## license .....: gplv3+

declare -r SCRIPT_NAME="ship"
declare -r SCRIPT_VERSION="3.0.0"
declare -r SCRIPT_DESCRIPTION="A simple, handy network addressing multitool with plenty of features"

declare -r AUTHOR_NAME="Sotirios M. Roussis"
declare -r AUTHOR_NICKNAME="xtonousou"
declare -r AUTHOR_EMAIL="mailto:xtonousou@gmail.com"

declare -A OPTIONS=(
    [action]=0
    [debug]=0
    [force]=0
    [nocolor]=0
)
declare -A C=(
    [0]=$'\e[1;0m'      # reset
    [r]=$'\e[1;31;40m'  # red
    [g]=$'\e[1;32;40m'  # green
    [b]=$'\e[1;34;40m'  # blue
)

function debug_msg() {
    # $1 -> $LINENO
    # $2 -> $FUNCNAME[0]
    # $3 -> Message to print
    echo -e "${C[b]}Debug${C[0]}: Line [${C[g]}${1}${C[0]}]: Function [${C[g]}${2}${C[0]}]: ${3}" >&2

    return 0
}

function error_msg() {
    # $1 -> Message to print
    echo -e "${C[r]}Error${C[0]}: ${1}" >&2

    return 0
}

function _is_shell_compatible() {
    # return codes:
    #   1: shell is not bash
    #   2: bash shell version is older than the minimum requirement
    if [ "$(basename "${SHELL}")" != "bash" ]; then
        return 1
    elif [ "${BASH_VERSINFO[0]}${BASH_VERSINFO[1]}" -lt 40 ]; then
        return 2
    fi
    return 0
}

function _is_positive_integer() {
    # $1 -> argument to check
    if [[ ! "${1}" =~ ^[0-9]+$ ]]; then
        return 1
    fi
    return 0
}

function _kernel() {
    # prints out the kernel name, release and the hostname
    uname --kernel-name --kernel-release --machine
    return 0
}

function _shell() {
    # prints out the current shell and its version
    declare shell
    shell=$(basename "${SHELL}")
    if [ "${shell}" != "bash" ]; then
        shell="${shell} is incompatible"
    else
        shell="${shell} ${BASH_VERSION}"
    fi
    echo -n "${shell}"
    return 0
}

function _join() {
    # join strings together with a given field seperator (can be more than one char)
    # $1 -> seperator
    # $2..N -> fields to seperate
    # Usage: _join @ hello "my friend"
    #           hello@my friend
    #        _join ,@, hello my "precious friend"
    #           hello,@,my,@,precious friend
    declare out
    declare c
    declare sep

    out=""
    for c in "${@}"; do
        if [ -z "${sep}" ]; then
            sep="${c}"
            continue
        fi
        out+="${c}${sep}"
    done

    echo -n "${out:0:-${#sep}}"

    return 0
}

function _inject_rgxp() {
    case "${1}" in
        "mac")
            declare -g rgxp_mac
            rgxp_mac="([a-fA-F0-9]{2}:){5}[a-fA-F0-9]{2}"
        ;;
        "ipv4")
            declare -g rgxp_ipv4
            rgxp_ipv4="((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|"
            rgxp_ipv4+="(2[0-4]|1{0,1}[0-9]){0,1}[0-9])"
        ;;
        "ipv6")
            declare -g rgxp_ipv6
            rgxp_ipv6="([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|"
            rgxp_ipv6+="([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:"
            rgxp_ipv6+="[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4})"
            rgxp_ipv6+="{1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|"
            rgxp_ipv6+="([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]"
            rgxp_ipv6+="{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:"
            rgxp_ipv6+="[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|"
            rgxp_ipv6+="fe08:(:[0-9a-fA-F]{1,4}){2,2}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4})"
            rgxp_ipv6+="{0,1}:){0,1}${rgxp_ipv4}|([0-9a-fA-F]{1,4}:){1,4}:${rgxp_ipv4}"
        ;;
        "ipv4cidr")
            declare -g rgxp_ipv4_cidr
            rgxp_ipv4_cidr="(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|"
            rgxp_ipv4_cidr+="25[0-5])\\.){3}([0-9]|""[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|"
            rgxp_ipv4_cidr+="25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))"
        ;;
        "ipv6cidr")
            declare -g rgxp_ipv6_cidr
            rgxp_ipv6_cidr="^s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|"
            rgxp_ipv6_cidr+="(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|"
            rgxp_ipv6_cidr+="2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|"
            rgxp_ipv6_cidr+=":))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|"
            rgxp_ipv6_cidr+=":((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|"
            rgxp_ipv6_cidr+="[1-9]?d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]"
            rgxp_ipv6_cidr+="{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]d|1dd|"
            rgxp_ipv6_cidr+="[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|"
            rgxp_ipv6_cidr+="(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|"
            rgxp_ipv6_cidr+="((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)"
            rgxp_ipv6_cidr+="(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]"
            rgxp_ipv6_cidr+="{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4})"
            rgxp_ipv6_cidr+="{0,3}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|"
            rgxp_ipv6_cidr+="[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]"
            rgxp_ipv6_cidr+="{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]d|"
            rgxp_ipv6_cidr+="1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|"
            rgxp_ipv6_cidr+="(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}"
            rgxp_ipv6_cidr+=":((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|"
            rgxp_ipv6_cidr+="[1-9]?d)){3}))|:)))(%.+)?s*(\\/([0-9]|[1-9][0-9]|"
            rgxp_ipv6_cidr+="1[0-1][0-9]|12[0-8]))?$"
        ;;
    esac

    return 0
}

function dec_to_bin() {
    declare d2b

    d2b=({0..1}{0..1}{0..1}{0..1}{0..1}{0..1}{0..1}{0..1})
    printf "%s" "${d2b[${1}]}"

    return 0
}

function dec_to_hex() {
    printf "%#X" "${1}"

    return 0
}

function bin_to_dec() {
    printf "%s" "$((2#${1}))"

    return 0
}

function dotted_quad_ip_to_decimal() {
    declare a
    declare b
    declare c
    declare d

    IFS=. read -r a b c d <<< "${1}"
    printf '%d\n' "$(( a * 256 ** 3 + b * 256 ** 2 + c * 256 + d ))"

    return 0
}

function show_port_protocol_list() {
    declare item
    declare -ra ports_array=(
    "20-21" "22" "23" "25" "53" "67-68" "69" "80" "110" "123" "137-139" "143"
    "161-162" "179" "389" "443" "636" "989-990"
    )
    declare -ra ports_tcp_udp_array=(
    "tcp" "tcp" "tcp" "tcp" "tcp/udp" "udp" "udp" "tcp" "tcp" "udp" "tcp/udp"
    "tcp" "tcp/udp" "tcp" "tcp/udp" "tcp" "tcp/udp" "tcp"
    )
    declare -ra ports_protocol_array=(
    "ftp" "ssh" "telnet" "smtp" "dns" "dhcp" "tftp" "http" "popv3" "ntp"
    "netbios" "imap" "snmp" "bgp" "ldap" "https" "ldaps" "ftp over tls/ssl"
    )

    for item in "${!ports_array[@]}"; do
        printf "%-17s%-8s%s\\n" "${ports_protocol_array[item]}" "${ports_tcp_udp_array[item]}" "${ports_array[item]}"
    done

    return 0
}

function show_version() {
    # prints out script's, host's information
    echo -e "   ${C[r]}▄▄▄▄▄${C[0]}    ${C[r]}▄${C[0]}  ${C[r]}█${C[0]} ${C[r]}▄█${C[0]} ${C[r]}█${C[0]} ${C[r]}▄▄${C[0]}\\tauthor ...: ${AUTHOR_NAME} - ${AUTHOR_NICKNAME}"
    echo -e "  ${C[r]}█${C[0]}     ${C[r]}▀▄${C[0]} ${C[r]}█${C[0]}   ${C[r]}█${C[0]} ${C[r]}██${C[0]} ${C[r]}█${C[0]}   ${C[r]}█${C[0]}\\tmail .....: ${AUTHOR_EMAIL}"
    echo -e "${C[r]}▄${C[0]}  ${C[r]}▀▀▀▀▄${C[0]}   ${C[r]}██▀▀█${C[0]} ${C[r]}██${C[0]} ${C[r]}█▀▀▀${C[0]}\\tterminal .: ${TERM:-Unknown}"
    echo -e " ${C[r]}▀▄▄▄▄▀${C[0]}    ${C[r]}█${C[0]}   ${C[r]}█${C[0]} ${C[r]}▐█${C[0]} ${C[r]}█${C[0]}\\t\\tscript version : ${SCRIPT_NAME} ${SCRIPT_VERSION}"
    echo -e "              ${C[r]}█${C[0]}   ${C[r]}▐${C[0]}  ${C[r]}█${C[0]}\\t\\tshell version .: $(_shell)"
    echo -e "             ${C[r]}▀${C[0]}        ${C[r]}▀${C[0]}\\t\\tkernel version : $(_kernel)"

    return 0
}

function show_help() {
    echo "${SCRIPT_NAME} - ${SCRIPT_DESCRIPTION}"
    echo
    echo "Options:"
    echo -e "  ${SCRIPT_NAME} -4 --ipv4\\t\\tShow the IPv4 address of each network interface."
    echo -e "  ${SCRIPT_NAME} -h --help\\t\\tShow this screen."
    echo -e "  ${SCRIPT_NAME} -v --version\\t\\tShow version information."

    return 0
}

function main() {
    _is_shell_compatible
    case "${?}" in
        1)
            error_msg "Your current shell '${SHELL}' is not compatible. BASH>=4.0 is required."
            exit 1
        ;;
        2)
            error_msg "Your current BASH version (${BASH_VERSINFO[0]}.${BASH_VERSINFO[1]}) is not compatible. BASH>=4.0 is required."
            exit 2
        ;;
    esac

    if [ "${#}" -eq 0 ]; then
        show_help
        exit 3
    fi

    while [ "${#}" -gt 0 ]; do
        case "${1}" in
            # helping flags
            --debug)
                OPTIONS[debug]=1
                shift
            ;;
            --force|--forced)
                OPTIONS[force]=1
                shift
            ;;
            --nocolor|--no-color)
                OPTIONS[nocolor]=1
                shift
            ;;
            -q|--quick)
                OPTIONS[nocolor]=1
                OPTIONS[force]=1
                shift
            ;;
            # arguments that do not require any positional arguments after themselves
            -4c|-c4|--ip-c|--ip4-c|--ipv4-c|--ip-cidr|--ip4-cidr|--ipv4-cidr\
            |-4|--ip|--ip4|--ipv4\
            |-6c|-c6|--ip6-c|--ipv6-c|--ip6-cidr|--ipv6-cidr\
            |-6|--ip6|--ipv6\
            |-ac|-ca|--all-c|--c-all|--cidr-all\
            |-a|--all\
            |-A|--arp\
            |-D|--dns\
            |-d|--driver\
            |-g|--gateway\
            |-i|--info|--information\
            |-m|--mac\
            |-n|--nic|--nics|--interfaces|--network-interfaces\
            |-p|-e|--public|--external\
            |-s|--scan|--nscan|--net-scan|--sweep|--ping-sweep|--discover\
            |-v|--version)
                if [ "${OPTIONS[action]}" == "0" ]; then
                    OPTIONS[action]="${1}"
                fi
                shift
            ;;
            # arguments that MAY have another positional argument after themselves
            -h|--help\
            |-V|--vendor)
                if [ "${OPTIONS[debug]}" == "1" ]; then
                    debug_msg "${LINENO}" "${FUNCNAME[0]}" "Action [${OPTIONS[action]}] : Number of Arguments [${#}] : Arguments [${*}]"
                fi

                case "${OPTIONS[action]}:${#}" in
                    "0:1")
                        OPTIONS[action]="${1}"
                        shift
                    ;;
                    "0:"*)
                        OPTIONS[action]="${1} \"${2}\""
                        break
                    ;;
                esac
            ;;
            # arguments that MUST have one positional argument after themselves
            -f4|--find-4|--find-ip4|--find-ipv4\
            |-f6|--find-6|--find-ip6|--find-ipv6\
            |-f|--find\
            |-l|--listen\
            |-r6|--route6|--route-6|--route-ip6|--route-ipv6\
            |-r|-r4|--route|--route4|--route-4|--route-ip|--route-ip4|--route-ipv4\
            |-u|-w|--url|--urls|--web|--website|--websites)
                if [ "${OPTIONS[debug]}" == "1" ]; then
                    debug_msg "${LINENO}" "${FUNCNAME[0]}" "Action [${OPTIONS[action]}] : Number of Arguments [${#}] : Arguments [${*}]"
                fi

                case "${OPTIONS[action]}:${#}" in
                    "0:2")
                        OPTIONS[action]="${1} \"${2}\""
                        shift 2
                    ;;
                    *)
                        error_msg "Missing positional argument for '${1}': See 'ship --help ${1}'" >&2
                        exit 4
                    ;;
                esac
            ;;
            # exceptional arguments that MAY or MUST have SPECIFIC positional arguments after themselves
            -ic|--ipcalc|--ip-calc|--ip-calculate)
                if [ "${OPTIONS[debug]}" == "1" ]; then
                    debug_msg "${LINENO}" "${FUNCNAME[0]}" "Action [${OPTIONS[action]}] : Number of Arguments [${#}] : Arguments [${*}]"
                fi

                if [ "${OPTIONS[action]}" == "0" ]; then
                    OPTIONS[action]="${*}"
                fi
                # needs extra arguments and processing
                break
            ;;
            --) # end argument parsing
                shift
                break
            ;;
            --*=|-*) # unsupported arguments
                echo "Error: Unsupported argument '${1}'" >&2
                exit 5
            ;;
        esac
    done

    if [ "${OPTIONS[debug]}" == "1" ]; then
        debug_msg "${LINENO}" "${FUNCNAME[0]}" "Arguments [${OPTIONS[*]}]"
    fi

    # only helping flags and no actions
    if [ "${OPTIONS[action]}" == "0" ]; then
        show_help
        exit 6
    fi

    # disable colors if required to
    if [ "${OPTIONS[nocolor]}" == "1" ]; then
        C[0]=""
        C[r]=""
        C[g]=""
        C[b]=""
    fi

    # call functions based on given action
    case "${OPTIONS[action]}" in
        -4c|-c4|--ip-c|--ip4-c|--ipv4-c|--ip-cidr|--ip4-cidr|--ipv4-cidr)
        ;;
        -4|--ip|--ip4|--ipv4)
        ;;
        -6c|-c6|--ip6-c|--ipv6-c|--ip6-cidr|--ipv6-cidr)
        ;;
        -6|--ip6|--ipv6)
        ;;
        -ac|-ca|--all-c|--c-all|--cidr-all)
        ;;
        -a|--all)
        ;;
        -A|--arp)
        ;;
        -D|--dns)
        ;;
        -d|--driver)
        ;;
        -f4|--find-4|--find-ip4|--find-ipv4)
        ;;
        -f6|--find-6|--find-ip6|--find-ipv6)
        ;;
        -f|--find)
        ;;
        -g|--gateway)
        ;;
        -h|--help)
            show_help
        ;;
        -ic|--ipcalc|--ip-calc|--ip-calculate)
        ;;
        -i|--info|--information)
        ;;
        -l|--listen)
        ;;
        -m|--mac)
        ;;
        -n|--nic|--nics|--interfaces|--network-interfaces)
        ;;
        -p|-e|--public|--external)
        ;;
        -r6|--route6|--route-6|--route-ip6|--route-ipv6)
        ;;
        -r|-r4|--route|--route4|--route-4|--route-ip|--route-ip4|--route-ipv4)
        ;;
        -s|--sweep|--ping-sweep|--disco|--discover|--discovery)
        ;;
        -u|-w|--url|--urls|--web|--website|--websites)
        ;;
        -V|--vendor)
        ;;
        -v|--version)
            show_version
        ;;
    esac

    return 0
}

main "${@}"
