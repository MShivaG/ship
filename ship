#! /usr/bin/env bash
## title........: ship
## description..: a simple, handy network addressing multitool with plenty of features
## author.......: sotirios m. roussis - xtonousou - xtonousou@gmail.com
## date.........: 20191102
## usage........: bash --norc ship -h --help -ncq --
## bash version.: 4.0 or later
## license .....: gplv3+

declare -r SCRIPT_NAME="ship"
declare -r SCRIPT_VERSION="3.0.0"
declare -r SCRIPT_DESCRIPTION="A simple, handy network addressing multitool with plenty of features"

declare -r AUTHOR_NAME="Sotirios M. Roussis"
declare -r AUTHOR_NICKNAME="xtonousou"
declare -r AUTHOR_EMAIL="mailto:xtonousou@gmail.com"

declare -A OPTIONS=(
    [action]=0
    [debug]=0
    [force]=0
    [nocolor]=0
)
declare -A C=(
    [0]=$'\e[1;0m'
    [r]=$'\e[1;31;40m'
    [g]=$'\e[1;32;40m'
    [b]=$'\e[1;34;40m'
)

function debug_msg() {
    # $1 -> $LINENO
    # $2 -> $FUNCNAME[0]
    # $3 -> Message to print
    echo "DEBUG : Line [${1}] : Function [${2}] : ${3}" >&2
    return 0
}

function _kernel() {
    # prints out the kernel name, release and the hostname
    uname --kernel-name --kernel-release --machine
    return 0
}

function _shell() {
    # prints out the current shell and its version
    # if the shell is not bash then prints out the current shell
    #   and a message that the shell is incompatible with the script
    declare shell
    shell=$(basename "${SHELL}")
    if [ "${shell}" != "bash" ]; then
        shell="${shell} is incompatible"
    else
        shell="${shell} ${BASH_VERSION}"
    fi
    echo "${shell}"
    return 0
}

function _join() {
    # join strings together with a given field seperator (can be more than one char)
    # $1 -> seperator
    # $2..N -> fields to seperate
    # Usage: _join @ hello "my friend"
    #           hello@my friend
    #        _join ,@, hello my "precious friend"
    #           hello,@,my,@,precious friend
    declare out
    declare c
    declare sep

    out=""
    for c in "${@}"; do
        if [ -z "${sep}" ]; then
            sep="${c}"
            continue
        fi
        out+="${c}${sep}"
    done

    echo "${out:0:-${#sep}}"

    return 0
}

function show_version() {
    # prints out script's, host's information
    echo -e "   ${C[r]}▄▄▄▄▄${C[0]}    ${C[r]}▄${C[0]}  ${C[r]}█${C[0]} ${C[r]}▄█${C[0]} ${C[r]}█${C[0]} ${C[r]}▄▄${C[0]}\\tauthor ...: ${AUTHOR_NAME} - ${AUTHOR_NICKNAME}"
    echo -e "  ${C[r]}█${C[0]}     ${C[r]}▀▄${C[0]} ${C[r]}█${C[0]}   ${C[r]}█${C[0]} ${C[r]}██${C[0]} ${C[r]}█${C[0]}   ${C[r]}█${C[0]}\\tmail .....: ${AUTHOR_EMAIL}"
    echo -e "${C[r]}▄${C[0]}  ${C[r]}▀▀▀▀▄${C[0]}   ${C[r]}██▀▀█${C[0]} ${C[r]}██${C[0]} ${C[r]}█▀▀▀${C[0]}\\tterminal .: ${TERM:-Unknown}"
    echo -e " ${C[r]}▀▄▄▄▄▀${C[0]}    ${C[r]}█${C[0]}   ${C[r]}█${C[0]} ${C[r]}▐█${C[0]} ${C[r]}█${C[0]}\\t\\tscript version : ${SCRIPT_NAME} ${SCRIPT_VERSION}"
    echo -e "              ${C[r]}█${C[0]}   ${C[r]}▐${C[0]}  ${C[r]}█${C[0]}\\t\\tshell version .: $(_shell)"
    echo -e "             ${C[r]}▀${C[0]}        ${C[r]}▀${C[0]}\\t\\tkernel version : $(_kernel)"
    return 0
}

function show_help() {
    echo "${SCRIPT_NAME} - ${SCRIPT_DESCRIPTION}"
    echo
    echo "Options:"
    echo -e "  ${SCRIPT_NAME} -4 --ipv4\\t\\tShow the IPv4 address of each network interface."
    echo -e "  ${SCRIPT_NAME} -h --help\\t\\tShow this screen."
    echo -e "  ${SCRIPT_NAME} -v --version\\t\\tShow version information."

    return 0
}

function main() {
    declare options=""

    # handle arguments
    [ "${#}" -eq 0 ] && show_help && exit 1
    while [ "${#}" -gt 0 ]; do
        case "${1}" in
            # helping flags
            --debug)
                OPTIONS[debug]=1
                shift
            ;;
            --force|--forced)
                OPTIONS[force]=1
                shift
            ;;
            --nocolor|--no-color)
                OPTIONS[nocolor]=1
                shift
            ;;
            -q|--quick)
                OPTIONS[nocolor]=1
                OPTIONS[force]=1
                shift
            ;;
            # arguments that do not require any positional arguments after them
            -4c|-c4|--ip-c|--ip4-c|--ipv4-c|--ip-cidr|--ip4-cidr|--ipv4-cidr\
            |-4|--ip|--ip4|--ipv4\
            |-6c|-c6|--ip6-c|--ipv6-c|--ip6-cidr|--ipv6-cidr\
            |-6|--ip6|--ipv6\
            |-ac|-ca|--all-c|--c-all|--cidr-all\
            |-a|--all\
            |-A|--arp\
            |-D|--dns\
            |-d|--driver\
            |-g|--gateway\
            |-i|--info|--information\
            |-m|--mac\
            |-n|--nic|--nics|--interfaces|--network-interfaces\
            |-p|-e|--public|--external\
            |-s|--scan|--nscan|--net-scan|--sweep|--ping-sweep|--discover\
            |-v|--version)
                if [ "${OPTIONS[action]}" == "0" ]; then
                    OPTIONS[action]="${1}"
                fi
                shift
            ;;
            # arguments that MAY have another positional argument after themselves
            -h|--help\
            |-V|--vendor)
                [ "${OPTIONS[debug]}" == "1" ] \
                    && debug_msg "${LINENO}" "${FUNCNAME[0]}" "Action [${OPTIONS[action]}] : Number of Arguments [${#}] : Arguments [${*}]"
                case "${OPTIONS[action]}:${#}" in
                    "0:1")
                        OPTIONS[action]="${1}"
                        shift
                    ;;
                    "0:"*)
                        OPTIONS[action]="${1} \"${2}\""
                        shift 2
                    ;;
                esac
            ;;
            # arguments that MUST have one positional argument after themselves
            -f4|--find-4|--find-ip4|--find-ipv4\
            |-f6|--find-6|--find-ip6|--find-ipv6\
            |-f|--find\
            |-l|--listen\
            |-r6|--route6|--route-6|--route-ip6|--route-ipv6\
            |-r|-r4|--route|--route4|--route-4|--route-ip|--route-ip4|--route-ipv4\
            |-u|-w|--url|--urls|--web|--website|--websites)
                if [ "${#}" == "1" ]; then
                    echo "Error: Missing positional argument for '${1}'" >&2
                    exit 2
                elif [ "${OPTIONS[action]}" == "0" ]; then
                    OPTIONS[action]="${1} \"${2}\""
                fi
                shift 2
            ;;
            # exceptional arguments that MAY or MUST have SPECIFIC positional arguments after themselves
            -ic|--ipcalc|--ip-calc|--ip-calculate)
                if [ "${OPTIONS[action]}" == "0" ]; then
                    OPTIONS[action]="${*}"
                fi
                # needs extra arguments and processing
                break
            ;;
            --) # end argument parsing
                shift
                break
            ;;
            --*=|-*) # unsupported arguments
                echo "Error: Unsupported argument '${1}'" >&2
                exit 3
            ;;
            *) # preserve positional arguments
                options="${options} ${1}"
                shift
            ;;
        esac
    done
    # set positional arguments in their proper place
    eval set -- "${options}"

    [ "${OPTIONS[debug]}" == "1" ] \
        && debug_msg "${LINENO}" "${FUNCNAME[0]}" "Arguments [${OPTIONS[*]}]"

    [ "${OPTIONS[action]}" == "0" ] \
        && show_help && exit 1

    # disable colors if required to
    [ "${OPTIONS[nocolor]}" == "1" ] \
        && C[0]="" \
        && C[r]="" \
        && C[g]="" \
        && C[b]=""

    # call functions based on given action
    case "${OPTIONS[action]}" in
        -4c|-c4|--ip-c|--ip4-c|--ipv4-c|--ip-cidr|--ip4-cidr|--ipv4-cidr)
        ;;
        -4|--ip|--ip4|--ipv4)
        ;;
        -6c|-c6|--ip6-c|--ipv6-c|--ip6-cidr|--ipv6-cidr)
        ;;
        -6|--ip6|--ipv6)
        ;;
        -ac|-ca|--all-c|--c-all|--cidr-all)
        ;;
        -a|--all)
        ;;
        -A|--arp)
        ;;
        -D|--dns)
        ;;
        -d|--driver)
        ;;
        -f4|--find-4|--find-ip4|--find-ipv4)
        ;;
        -f6|--find-6|--find-ip6|--find-ipv6)
        ;;
        -f|--find)
        ;;
        -g|--gateway)
        ;;
        -h|--help)
            show_help
        ;;
        -ic|--ipcalc|--ip-calc|--ip-calculate)
        ;;
        -i|--info|--information)
        ;;
        -l|--listen)
        ;;
        -m|--mac)
        ;;
        -n|--nic|--nics|--interfaces|--network-interfaces)
        ;;
        -p|-e|--public|--external)
        ;;
        -r6|--route6|--route-6|--route-ip6|--route-ipv6)
        ;;
        -r|-r4|--route|--route4|--route-4|--route-ip|--route-ip4|--route-ipv4)
        ;;
        -s|--sweep|--ping-sweep|--disco|--discover|--discovery)
        ;;
        -u|-w|--url|--urls|--web|--website|--websites)
        ;;
        -V|--vendor)
        ;;
        -v|--version)
            show_version
        ;;
    esac

    return 0
}

main "${@}"
